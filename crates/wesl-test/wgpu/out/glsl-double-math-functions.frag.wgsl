fn main_1() {
    var a: vec4<f64> = vec4(1.0lf);
    var b: vec4<f64> = vec4(2.0lf);
    var m: mat4x4<f64>;
    var i: i32 = 5i;
    var ceilOut: vec4<f64>;
    var roundOut: vec4<f64>;
    var floorOut: vec4<f64>;
    var fractOut: vec4<f64>;
    var truncOut: vec4<f64>;
    var absOut: vec4<f64>;
    var sqrtOut: vec4<f64>;
    var inversesqrtOut: vec4<f64>;
    var signOut: vec4<f64>;
    var transposeOut: mat4x4<f64>;
    var normalizeOut: vec4<f64>;
    var lengthOut: f64;
    var determinantOut: f64;
    var modOut: f64;
    var dotOut: f64;
    var maxOut: vec4<f64>;
    var minOut: vec4<f64>;
    var reflectOut: vec4<f64>;
    var crossOut: vec3<f64>;
    var distanceOut: f64;
    var stepOut: vec4<f64>;
    var ldexpOut: f64;
    var smoothStepScalar: f64;
    var smoothStepVector: vec4<f64>;
    var smoothStepMixed: vec4<f64>;

    let _e6 = a;
    let _e7 = b;
    let _e8 = a;
    let _e9 = b;
    m = mat4x4<f64>(vec4<f64>(_e6.x, _e6.y, _e6.z, _e6.w), vec4<f64>(_e7.x, _e7.y, _e7.z, _e7.w), vec4<f64>(_e8.x, _e8.y, _e8.z, _e8.w), vec4<f64>(_e9.x, _e9.y, _e9.z, _e9.w));
    let _e34 = a;
    ceilOut = ceil(_e34);
    let _e37 = a;
    roundOut = round(_e37);
    let _e40 = a;
    floorOut = floor(_e40);
    let _e43 = a;
    fractOut = fract(_e43);
    let _e46 = a;
    truncOut = trunc(_e46);
    let _e49 = a;
    absOut = abs(_e49);
    let _e52 = a;
    sqrtOut = sqrt(_e52);
    let _e55 = a;
    inversesqrtOut = inverseSqrt(_e55);
    let _e58 = a;
    signOut = sign(_e58);
    let _e61 = m;
    transposeOut = transpose(_e61);
    let _e64 = a;
    normalizeOut = normalize(_e64);
    let _e67 = a;
    lengthOut = length(_e67);
    let _e70 = m;
    determinantOut = determinant(_e70);
    let _e73 = a;
    let _e75 = b;
    modOut = (_e73.x - (floor((_e73.x / _e75.x)) * _e75.x));
    let _e82 = a;
    let _e83 = b;
    dotOut = dot(_e82, _e83);
    let _e86 = a;
    let _e87 = b;
    maxOut = max(_e86, _e87);
    let _e90 = a;
    let _e91 = b;
    minOut = min(_e90, _e91);
    let _e94 = a;
    let _e95 = b;
    reflectOut = reflect(_e94, _e95);
    let _e98 = a;
    let _e100 = b;
    crossOut = cross(_e98.xyz, _e100.xyz);
    let _e104 = a;
    let _e105 = b;
    distanceOut = distance(_e104, _e105);
    let _e108 = a;
    let _e109 = b;
    stepOut = step(_e108, _e109);
    let _e112 = a;
    let _e114 = i;
    ldexpOut = ldexp(_e112.x, _e114);
    smoothStepScalar = f64(smoothstep(0f, 1f, 0.5f));
    smoothStepVector = smoothstep(vec4(0.0lf), vec4(1.0lf), vec4(0.5lf));
    smoothStepMixed = smoothstep(vec4(0.0lf), vec4(1.0lf), vec4(0.5lf));
    return;
}

@fragment 
fn main() {
    main_1();
    return;
}
