[
  {
    "name": "integer-literal-abstract-int",
    "desc": "An integer literal without a suffix should be of AbstractInt type",
    "kind": "eval",
    "code": "1",
    "eval": "1",
    "expect": "pass"
  },
  {
    "name": "f32-conversion-abstract-float",
    "desc": "An AbstractFloat should be automatically convertible to f32",
    "kind": "context",
    "code": "let a: f32 = 3.14;",
    "expect": "pass"
  },
  {
    "name": "type-rule-failure-incompatible-assign",
    "desc": "Assigning f32 to an i32 variable should fail type checking",
    "kind": "context",
    "code": "var a: i32 = 1.0;",
    "expect": "fail",
    "note": "No automatic conversion from f32 to i32"
  },
  {
    "name": "let-decl-inference-i32",
    "desc": "Integer literal infers to i32 without suffix and no context",
    "kind": "eval",
    "code": "let x = 5; x",
    "eval": "5",
    "expect": "pass"
  },
  {
    "name": "vector-type-inference",
    "desc": "Vectors can be constructed with automatic type inference",
    "kind": "eval",
    "code": "var v = vec3(1, 2, 3); v",
    "eval": "vec3<i32>(1, 2, 3)",
    "expect": "pass"
  },
  {
    "name": "runtime-size-array",
    "desc": "Declaration of runtime-sized array outside of allowed contexts",
    "kind": "context",
    "code": "var<private> a: array<f32>; ",
    "expect": "fail",
    "note": "Runtime-sized arrays are only permitted as the last members of a structure."
  },
  {
    "name": "conversion-rank-u32-to-f32",
    "desc": "Conversion of u32 to f32 should be infeasible",
    "kind": "context",
    "code": "var a: f32 = 1u;",
    "expect": "fail",
    "note": "No automatic conversion from u32 to f32"
  },
  {
    "name": "atomic-restriction",
    "desc": "Atomic types should not evaluate into expressions",
    "kind": "context",
    "code": "let a = atomic<i32>(1);",
    "expect": "fail",
    "note": "Atomic types are not allowed for evaluation"
  },
  {
    "name": "alias-struct-member-bind",
    "desc": "Attributes in an alias struct should bind correctly",
    "kind": "context",
    "code": "alias MyStruct = struct { val: f32; };",
    "expect": "pass",
    "note": "Members of a type alias should carry over properties."
  },
  {
    "name": "out-of-bounds-index-vector",
    "desc": "Accessing a vector out of bounds",
    "kind": "context",
    "code": "var myVec: vec2<f32> = vec2<f32>(0, 1); let x = myVec[2];",
    "expect": "fail",
    "note": "Vector indexing should be within declared bounds"
  },
  {
    "name": "declare-i32-variable",
    "desc": "Declare a 32-bit signed integer variable",
    "kind": "syntax",
    "syntax": "module",
    "code": "var<private> myInt: i32;",
    "expect": "pass"
  },
  {
    "name": "declare-u32-variable",
    "desc": "Declare a 32-bit unsigned integer variable",
    "kind": "syntax",
    "syntax": "module",
    "code": "var<private> myUint: u32;",
    "expect": "pass"
  },
  {
    "name": "declare-f32-variable",
    "desc": "Declare a 32-bit floating point variable",
    "kind": "syntax",
    "syntax": "module",
    "code": "var<private> myFloat: f32;",
    "expect": "pass"
  },
  {
    "name": "declare-vec3f32-variable",
    "desc": "Declare a vec3 of 32-bit float",
    "kind": "syntax",
    "syntax": "module",
    "code": "var<private> myVec: vec3<f32>;",
    "expect": "pass"
  },
  {
    "name": "declare-mat3x3f32-variable",
    "desc": "Declare a mat3x3 of 32-bit float",
    "kind": "syntax",
    "syntax": "module",
    "code": "var<private> myMat: mat3x3<f32>;",
    "expect": "pass"
  },
  {
    "name": "declare-array-i32",
    "desc": "Declare a fixed-size array of integers",
    "kind": "syntax",
    "syntax": "module",
    "code": "var<private> myArray: array<i32, 5>;",
    "expect": "pass"
  },
  {
    "name": "declare-struct-type",
    "desc": "Declare a structure type",
    "kind": "syntax",
    "syntax": "module",
    "code": "struct MyStruct { a: i32; b: vec4<f32>; };",
    "expect": "pass"
  },
  {
    "name": "declare-invalid-vec-with-array",
    "desc": "Declare an invalid vector with unsized array type",
    "kind": "syntax",
    "syntax": "module",
    "code": "var<private> invalid: vec3<array<f32>>;",
    "expect": "fail"
  },
  {
    "name": "use-bool-type",
    "desc": "Use boolean types in expressions",
    "kind": "eval",
    "code": "true && false",
    "eval": "false",
    "expect": "pass"
  },
  {
    "name": "declare-invalid-sampler-array",
    "desc": "Declare an array with sampler type which should be invalid",
    "kind": "context",
    "code": "var<private> arr: array<sampler, 4>;",
    "expect": "fail",
    "note": "Samplers cannot appear inside arrays"
  },
  {
    "name": "declare-atomic-u32",
    "desc": "Declare an atomic<u32> and validate storage constraints",
    "kind": "context",
    "code": "var<workgroup> atomicVar: atomic<u32>;",
    "expect": "pass",
    "note": "atomic types can be placed in workgroup storage"
  },
  {
    "name": "declare-atomic-i32-invalid-storage",
    "desc": "Attempt to declare an atomic<i32> in private storage which should fail",
    "kind": "context",
    "code": "var<private> atomicVar: atomic<i32>;",
    "expect": "fail",
    "note": "atomic types must be in storage or workgroup address spaces"
  },
  {
    "name": "declare-array-negative-size",
    "desc": "Declare a fixed-size array with negative size",
    "kind": "context",
    "code": "var<private> invalidArray: array<i32, -3>;",
    "expect": "fail",
    "note": "Array element count must be a positive integer"
  },
  {
    "name": "declare-invalid-struct-member-type",
    "desc": "Declare a structure with a non-plain member type",
    "kind": "context",
    "code": "struct InvalidStruct { member: sampler; };",
    "expect": "fail",
    "note": "Structure members must be plain types"
  },
  {
    "name": "literal-i32-valid-range",
    "desc": "i32 integer literal within valid range",
    "kind": "eval",
    "code": "i32(2147483647)",
    "eval": "2147483647i",
    "expect": "pass"
  },
  {
    "name": "literal-i32-overflow",
    "desc": "i32 integer literal that exceeds valid positive range",
    "kind": "context",
    "code": "i32(2147483648)",
    "expect": "fail",
    "note": "Exceeds max positive value for i32."
  },
  {
    "name": "literal-u32-valid-range",
    "desc": "u32 integer literal within valid range",
    "kind": "eval",
    "code": "u32(4294967295)",
    "eval": "4294967295u",
    "expect": "pass"
  },
  {
    "name": "literal-u32-overflow",
    "desc": "u32 integer literal that exceeds valid range",
    "kind": "context",
    "code": "u32(4294967296)",
    "expect": "fail",
    "note": "Exceeds max value for u32."
  },
  {
    "name": "literal-f32-subnormal",
    "desc": "smallest positive subnormal f32 value",
    "kind": "eval",
    "code": "0x1p-149f",
    "eval": "1.40129846432481707092e-45f",
    "expect": "pass"
  },
  {
    "name": "literal-f32-normal",
    "desc": "smallest positive normal f32 value",
    "kind": "eval",
    "code": "0x1p-126f",
    "eval": "1.17549435082228750797e-38f",
    "expect": "pass"
  },
  {
    "name": "literal-f32-infinity",
    "desc": "overflowed f32 value treated as infinity",
    "kind": "context",
    "code": "3.5e38f",
    "expect": "fail",
    "note": "Exceeded max finite value for f32."
  },
  {
    "name": "scalar-types-addition",
    "desc": "addition of two abstract integers",
    "kind": "eval",
    "code": "2 + 3",
    "eval": "5",
    "expect": "pass"
  },
  {
    "name": "type-check-bool-if-cond",
    "desc": "if statement with non-bool condition",
    "kind": "context",
    "code": "var<function> myVar: i32; if (myVar) { }",
    "expect": "fail",
    "note": "if statement condition must have type bool."
  },
  {
    "name": "type-check-array-init",
    "desc": "array initialization with correct type",
    "kind": "eval",
    "context": "var<private> myArr: array<i32, 3>; let a: array<i32, 3> = array<i32, 3>(0, 1, 2);",
    "code": "array<i32, 3>(0, 1, 2)",
    "eval": "array<i32, 3>(0, 1, 2)",
    "expect": "pass"
  },
  {
    "name": "type-check-vec3-addition",
    "desc": "addition of vec3<f32> variables",
    "kind": "eval",
    "context": "var<function> a: vec3<f32> = vec3<f32>(1.0, 2.0, 3.0); var<function> b: vec3<f32> = vec3<f32>(4.0, 5.0, 6.0);",
    "code": "a + b",
    "eval": "vec3<f32>(5.0, 7.0, 9.0)",
    "expect": "pass"
  }
]