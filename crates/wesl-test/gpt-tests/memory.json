[
  {
    "name": "global-decl-var-private-read-write",
    "desc": "declares a global private variable with read_write access mode",
    "kind": "syntax",
    "syntax": "module",
    "code": "var<private,read_write> myVar: i32;",
    "expect": "fail",
    "note": "Private and function address spaces must not specify access mode."
  },
  {
    "name": "storage-var-decl-read-mode-default",
    "desc": "testing storage buffer default read access mode",
    "kind": "eval",
    "code": "var<storage> myVar: i32; myVar",
    "eval": "read",
    "expect": "pass"
  },
  {
    "name": "uniform-buffer-validation",
    "desc": "validating uniform buffer variables sharing alignment requirements",
    "kind": "context",
    "code": "struct MyStruct { x: f32; y: vec4<f32>; }; var<uniform> myBuffer: MyStruct;",
    "expect": "pass"
  },
  {
    "name": "uniform-buffer-stride-invalid",
    "desc": "check invalid array stride in uniform buffer",
    "kind": "context",
    "code": "struct Invalid { a: array<f32, 4>; }; @group(0) @binding(0) var<uniform> myArray: Invalid;",
    "expect": "fail",
    "note": "Uniform buffer requires array stride to be a multiple of 16."
  },
  {
    "name": "storage-to-vertex-stage-invalid",
    "desc": "storage buffer write access in vertex shader",
    "kind": "context",
    "code": "@vertex fn main() { var<storage,write> myStorageVar: i32; }",
    "expect": "fail",
    "note": "Storage buffer writes are not allowed in vertex shaders."
  },
  {
    "name": "workgroup-array-size",
    "desc": "validate dynamic array size in workgroup address space",
    "kind": "context",
    "code": "var<workgroup> dynamicArray: array<i32>; // size determined at runtime",
    "expect": "fail",
    "note": "Dynamic array sizes are not allowed in workgroup address space."
  },
  {
    "name": "struct-member-alignment-explicit",
    "desc": "struct with explicit alignment attributes to satisfy uniform constraints",
    "kind": "context",
    "code": "struct Aligned { @align(16) a: f32; b: vec3<f32>; }; var<uniform> buffer: Aligned;",
    "expect": "pass"
  },
  {
    "name": "memory-read-access-uniform-buffer",
    "desc": "validate read access to uniform buffer variable",
    "kind": "eval",
    "code": "struct UniformData { value: f32; }; @group(0) @binding(0) var<uniform> myUniform: UniformData; myUniform.value",
    "eval": "f32",
    "expect": "pass",
    "context": "const gpuShader: wgsl = @group(0) @binding(0) var<uniform> myUniform: UniformData;"
  },
  {
    "name": "memory-write-access-storage-buffer",
    "desc": "validate write access to storage buffer variable",
    "kind": "context",
    "code": "struct StorageData { value: f32; }; @group(0) @binding(0) var<storage,write> myStorage: StorageData; myStorage.value = 3.14;",
    "expect": "pass"
  },
  {
    "name": "atomic-memory-constraint",
    "desc": "ensure atomic types maintain proper storage layout",
    "kind": "context",
    "code": "var<storage,read_write> atomicVar: atomic<i32>;",
    "expect": "pass"
  },
  {
    "name": "memory-write-access-storage-address-space",
    "desc": "Write access to a variable in the storage address space.",
    "kind": "context",
    "code": "struct S { a: f32; b: f32; } @group(0) @binding(0) var<storage, read_write> buffer: S; buffer.a = 1.0;",
    "expect": "pass",
    "note": "Expect write access to be allowed in storage address space."
  },
  {
    "name": "memory-read-access-uniform-address-space",
    "desc": "Read access to a variable in the uniform address space.",
    "kind": "context",
    "code": "struct S { foo: f32; } @group(1) @binding(1) var<uniform> ub: S; let x = ub.foo;",
    "expect": "pass",
    "note": "Expect read access to be allowed in uniform address space."
  },
  {
    "name": "array-alignment-storage-address-space",
    "desc": "Checks alignment rules for arrays in the storage address space.",
    "kind": "context",
    "code": "var<storage> data: array<f32, 4>; // Element stride should respect storage alignment.",
    "expect": "pass",
    "note": "Alignment must be as per storage address space rules."
  },
  {
    "name": "alignment-violation-uniform-address-space",
    "desc": "Uniform buffer struct alignment violation.",
    "kind": "context",
    "code": "struct T { data: f32; data2: vec3<f32>; } @group(0) @binding(1) var<uniform> buffer: T;",
    "expect": "fail",
    "note": "Vec3<f32> must align to 16 bytes in uniform address space."
  },
  {
    "name": "access-mode-optional-storage",
    "desc": "Test access mode is optional for storage address space.",
    "kind": "context",
    "code": "@group(0) @binding(0) var<storage> buffer: array<f32>;",
    "expect": "pass",
    "note": "Access mode should default to read if omitted."
  },
  {
    "name": "storage-forbidden-in-vertex-shader",
    "desc": "Variable in storage address space accessed by vertex shader should fail.",
    "kind": "context",
    "code": "@group(0) @binding(0) var<storage> buffer: array<f32>;",
    "expect": "fail",
    "note": "Storage access is not allowed in vertex shader."
  },
  {
    "name": "uniform-bounded-layout-requirement",
    "desc": "Test minimum offset requirement for uniform address space struct members.",
    "kind": "context",
    "code": "struct A { a: vec4<f32>; b: vec3<f32>; } @group(0) @binding(0) var<uniform> ubo: A;",
    "expect": "pass",
    "note": "The vec3<f32> in the uniform buffer requires padding to align to 16 bytes."
  },
  {
    "name": "storage-buffer-read-access",
    "desc": "Verify read access on a storage buffer.",
    "kind": "context",
    "code": "struct S {\n  a: f32,\n  b: u32,\n  c: f32\n};\n@group(0) @binding(0) var<storage,read> buffer: S;\nfn main() {\n  let x = buffer.b;\n}",
    "expect": "pass",
    "note": "Accessing only one field from the storage buffer, ensuring it doesn't affect unaccessed fields."
  },
  {
    "name": "storage-buffer-write-access",
    "desc": "Verify write access on a storage buffer.",
    "kind": "context",
    "code": "struct S {\n  a: f32,\n  b: u32,\n  c: f32\n};\n@group(0) @binding(0) var<storage,write> buffer: S;\nfn main() {\n  buffer.b = 10u;\n}",
    "expect": "pass",
    "note": "Writing to one field of the struct, checking if only that field is affected."
  },
  {
    "name": "uniform-buffer-read-only",
    "desc": "Uniform buffer should only support read access.",
    "kind": "context",
    "code": "struct S {\n  a: f32,\n  b: u32\n};\n@group(0) @binding(0) var<uniform> buffer: S;\nfn main() {\n  buffer.b = 10u;\n}",
    "expect": "fail",
    "note": "Uniform buffers should only allow read operations; hence, write should fail."
  },
  {
    "name": "alignment-requirement-fail",
    "desc": "Check failure when alignment constraints are violated in uniform buffer.",
    "kind": "context",
    "code": "struct S {\n  a: f32,\n  b: u32,\n  c: i32\n};\nstruct Invalid {\n  a: S,\n  b: u32 // offset constraint violated\n};\n@group(0) @binding(0) var<uniform> buffer: Invalid;",
    "expect": "fail",
    "note": "Uniform buffer requires members to be aligned properly as per rules described."
  },
  {
    "name": "array-uniform-buffer-alignment-fail",
    "desc": "Array type in uniform buffer fails due to alignment issues.",
    "kind": "context",
    "code": "struct S {\n  a: array<f32, 8> // stride is 4 which is not aligned\n};\n@group(0) @binding(0) var<uniform> buffer: S;",
    "expect": "fail",
    "note": "Alignment stride should be a multiple of 16 bytes for arrays in uniform buffers."
  },
  {
    "name": "unique-memory-reference-private",
    "desc": "Ensure private variables form unique memory references.",
    "kind": "context",
    "code": "var<private> a: f32;\nvar<private> b: f32;\nfn main() {\n  a = a + b;\n}",
    "expect": "pass",
    "note": "Each private variable should maintain a unique memory reference."
  },
  {
    "name": "layout-vec3-uniform-buffer",
    "desc": "Ensure correct memory layout for vec3 in uniform buffer.",
    "kind": "context",
    "code": "struct S {\n  a: u32,\n  b: vec3<f32> // should allocate 16 bytes for alignment\n};\n@group(0) @binding(0) var<uniform> buffer: S;",
    "expect": "pass",
    "note": "vec3 should have 16-byte alignment due to uniform buffer constraints."
  }
]