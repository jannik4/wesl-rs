[
  {
    "name": "const-expression-int-literal",
    "desc": "Evaluates a const-expression with a simple integer literal.",
    "kind": "eval",
    "code": "42",
    "eval": "42",
    "expect": "pass"
  },
  {
    "name": "const-expression-negation",
    "desc": "Negates an integer literal in a const-expression.",
    "kind": "eval",
    "code": "-5",
    "eval": "-5",
    "expect": "pass"
  },
  {
    "name": "const-expression-parentheses",
    "desc": "Evaluates a const-expression with parentheses.",
    "kind": "eval",
    "code": "(42 + 8)",
    "eval": "50",
    "expect": "pass"
  },
  {
    "name": "vector-swizzle-rgba",
    "desc": "Swizzle a vec4<f32> using rgba component names.",
    "kind": "eval",
    "code": "vec4<f32>(1.0, 2.0, 3.0, 4.0).rgba",
    "eval": "vec4<f32>(1.0, 2.0, 3.0, 4.0)",
    "expect": "pass"
  },
  {
    "name": "expression-index-vector-out-of-bounds",
    "desc": "Accessing out-of-bounds index in a vector returns indeterminate value.",
    "kind": "context",
    "code": "fn out_of_bounds() {\n   let v = vec3<i32>(1,\n  2,\n  3);\n   let index = v[\n    4\n  ]; // Should trigger an error due to out-of-bounds access\n}",
    "expect": "fail"
  },
  {
    "name": "logical-not-operator",
    "desc": "Tests logical negation operator on a bool.",
    "kind": "eval",
    "code": "!true",
    "eval": "false",
    "expect": "pass"
  },
  {
    "name": "logical-not-operator-vector",
    "desc": "Tests logical negation operator on a vec<bool>.",
    "kind": "eval",
    "code": "!vec3<bool>(true, false, true)",
    "eval": "vec3<bool>(false, true, false)",
    "expect": "pass"
  },
  {
    "name": "short-circuit-and",
    "desc": "Verifies short-circuiting in logical AND expressions.",
    "kind": "eval",
    "code": "false && (1 / 0 == 0)",
    "eval": "false",
    "expect": "pass"
  },
  {
    "name": "add-integer-overflow",
    "desc": "Evaluates adding two integers that overflow.",
    "kind": "context",
    "code": "let overflow = 2147483647 + 1;",
    "expect": "pass",
    "note": "Signed integer overflow is defined to wrap around."
  },
  {
    "name": "shift-left-out-of-bounds",
    "desc": "Tests behaviour when shifting left by a value greater than width.",
    "kind": "context",
    "code": "let result = 1 << 32;",
    "expect": "fail",
    "note": "Shifting left by the bit width or more is invalid in WGSL."
  },
  {
    "name": "division-by-zero-int",
    "desc": "Attempts to divide an integer by zero.",
    "kind": "eval",
    "code": "42 / 0",
    "expect": "fail",
    "note": "Integer division by zero should cause a shader creation error."
  },
  {
    "name": "vec3-construction",
    "desc": "Creates a vec3<float> using scalar multiplication and addition.",
    "kind": "eval",
    "code": "vec3<f32>(1.0) + vec3<f32>(0.1, 0.2, 0.3)",
    "eval": "vec3<f32>(1.1, 1.2, 1.3)",
    "expect": "pass"
  },
  {
    "name": "const-expression-int",
    "desc": "Evaluates a simple integer const-expression",
    "kind": "eval",
    "code": "const myConst : i32 = 42;",
    "eval": "42",
    "expect": "pass"
  },
  {
    "name": "const-expression-float",
    "desc": "Evaluates a simple float const-expression",
    "kind": "eval",
    "code": "const myFloatConst : f32 = 3.14;",
    "eval": "3.14",
    "expect": "pass"
  },
  {
    "name": "const-expression-overflow",
    "desc": "Evaluates a const-expression that overflows a 32-bit integer",
    "kind": "eval",
    "code": "const overflowTest: i32 = 2147483647 + 1;",
    "expect": "fail",
    "note": "This tests the overflow in constant evaluation"
  },
  {
    "name": "const-expression-shift-left",
    "desc": "Shift left operation with const-expressions resulting in overflow",
    "kind": "eval",
    "code": "const shiftLeftOverflow: i32 = 1 << 32;",
    "expect": "fail",
    "note": "Shifting should result in a shader-creation error due to overflow"
  },
  {
    "name": "const-expression-parentheses",
    "desc": "Evaluation with nested parentheses",
    "kind": "eval",
    "code": "const parenthesized : i32 = (5 + (3 * 2));",
    "eval": "11",
    "expect": "pass"
  },
  {
    "name": "const-expression-short-circuit",
    "desc": "Short-circuit evaluation does not evaluate RHS",
    "kind": "eval",
    "code": "false && (10 / 0 == 0);",
    "eval": "false",
    "expect": "pass"
  },
  {
    "name": "override-declaration-no-init",
    "desc": "Override declaration with no initializer",
    "kind": "context",
    "code": "override myOverride : i32;",
    "expect": "pass",
    "note": "Testing declaration with no initial value"
  },
  {
    "name": "literal-abstract-int",
    "desc": "Evaluates an abstract integer literal",
    "kind": "eval",
    "code": "const abstractInt = 123;",
    "eval": "123",
    "expect": "pass"
  },
  {
    "name": "swizzle-invalid-mix",
    "desc": "Swizzle should not mix different lettering sets",
    "kind": "syntax",
    "syntax": "expression",
    "code": "color.rybw",
    "expect": "fail"
  },
  {
    "name": "swizzle-valid-order",
    "desc": "Valid swizzle in reverse order",
    "kind": "syntax",
    "syntax": "expression",
    "code": "color.bg",
    "expect": "pass"
  },
  {
    "name": "const-expression-simple-integer",
    "desc": "Evaluates a simple integer const expression",
    "kind": "eval",
    "code": "const x = 42;",
    "eval": "42",
    "expect": "pass"
  },
  {
    "name": "const-expression-negative-integer",
    "desc": "Evaluates a negative integer in a const expression",
    "kind": "eval",
    "code": "const y = -5;",
    "eval": "-5",
    "expect": "pass"
  },
  {
    "name": "const-expression-overflow-error",
    "desc": "Expression should fail due to integer overflow",
    "kind": "eval",
    "code": "const z = -2147483648i - 1;",
    "expect": "fail"
  },
  {
    "name": "const-expression-addition-of-abstract-ints",
    "desc": "Evaluates addition of abstract integers",
    "kind": "eval",
    "code": "const result = 21 + 21;",
    "eval": "42",
    "expect": "pass"
  },
  {
    "name": "override-expression-division-by-zero",
    "desc": "Division by zero in an override expression results in pipeline-creation error",
    "kind": "context",
    "code": "override divisor: i32 = 0; const result = 1 / divisor;",
    "expect": "fail",
    "note": "This should fail as a pipeline-creation error if 'divisor' is not overridden."
  },
  {
    "name": "short-circuit-and",
    "desc": "Short-circuiting 'and' operator prevents evaluation of RHS if LHS is false",
    "kind": "eval",
    "context": "const flag = false;",
    "code": "flag && (5 / 0 == 0)",
    "eval": "false",
    "expect": "pass"
  },
  {
    "name": "component-extraction-single-color",
    "desc": "Extract a single component from a vec3 using color notation",
    "kind": "eval",
    "code": "let color = vec3<f32>(0.3, 0.6, 0.9); let b = color.b;",
    "eval": "0.9",
    "expect": "pass"
  },
  {
    "name": "swizzle-invalid-mixed",
    "desc": "Swizzle with mixed component letters should fail",
    "kind": "syntax",
    "syntax": "expression",
    "code": "let mixed = vec4<f32>(1.0, 2.0, 3.0, 4.0).ry;",
    "expect": "fail"
  },
  {
    "name": "out-of-bounds-array-access",
    "desc": "Fail on accessing an out-of-bounds index in a const-expression array",
    "kind": "syntax",
    "syntax": "expression",
    "code": "let arr = array<i32, 3>(0, 1, 2); let out_of_bounds = arr[3];",
    "expect": "fail"
  },
  {
    "name": "matrix-column-access",
    "desc": "Accessing a valid column of a matrix",
    "kind": "eval",
    "code": "let m = mat2x2<f32>(0.0, 1.0, 2.0, 3.0); let col = m[1];",
    "eval": "vec2<f32>(1.0, 3.0)",
    "expect": "pass"
  }
]