[
  {
    "name": "if-statement-uniform-control-flow",
    "desc": "Ensure textureSample is called only in uniform control flow",
    "kind": "context",
    "code": "@group(0) @binding(0) var t : texture_2d<f32>;\n@group(0) @binding(1) var s : sampler;\n\n@fragment\nfn main(@builtin(position) pos : vec4<f32>) {\n  if (pos.x < 0.5) {\n    _ = textureSample(t, s, pos.xy);\n  }\n}\n",
    "expect": "fail",
    "note": "textureSample should only be called in uniform control flow."
  },
  {
    "name": "valid-loop-uniform-control",
    "desc": "Loop with uniform control flow using uniform built-in",
    "kind": "context",
    "code": "@compute @workgroup_size(16,1,1)\nfn main(@builtin(workgroup_id) wgid : vec3<u32>) {\n  for (var i = 0u; i < 10; i++) {\n    workgroupBarrier();\n    if (wgid.x == 1) {\n      break;\n    }\n  }\n}\n",
    "expect": "pass",
    "note": "Loop control dependent on uniform workgroup_id."
  },
  {
    "name": "non-uniform-value-function",
    "desc": "function call with non-uniform value leading to uniformity failure",
    "kind": "context",
    "code": "fn scale(in1: f32, in2: f32) -> f32 {\n  let v = in1 / in2;\n  return v;\n}\n\n@fragment\nfn main(@builtin(position) pos: vec4<f32>) {\n  let tmp = scale(pos.x, 0.5);\n  if tmp > 1.0 {\n    _ = textureSample(t, s, pos.xy);\n  }\n}\n",
    "expect": "fail"
  },
  {
    "name": "floating-point-overflow",
    "desc": "Detect shader-creation error for float overflow in const-expression",
    "kind": "eval",
    "code": "let max = 3.402823e+38;\nlet result = max + max;\n",
    "eval": "result",
    "expect": "fail",
    "note": "Float overflow in a const-expression leads to a shader-creation error."
  },
  {
    "name": "builtin-call-dpdx",
    "desc": "Check dpdx call for uniform control flow in fragment shader",
    "kind": "context",
    "code": "fn check_derivative(pos: vec3<f32>) -> f32 {\n  return dpdx(pos.x);\n}\n\n@fragment\nfn main(@builtin(position) pos : vec4<f32>) {\n  _ = check_derivative(pos.xyz);\n}\n",
    "expect": "fail",
    "note": "dpdx should be called in uniform control flow."
  },
  {
    "name": "function-call-uniform-control-flow",
    "desc": "Calling a barrier function within an if statement depending on a non-uniform value should fail.",
    "kind": "context",
    "code": "fn main(@builtin(position) pos : vec4<f32>) { if (pos.x < 0.5) { workgroupBarrier(); } }",
    "expect": "fail",
    "note": "The use of a non-uniform value 'position' in control flow causes a uniformity failure."
  },
  {
    "name": "function-call-uniform-control-flow-valid",
    "desc": "Calling a barrier function outside any non-uniform control flow should pass.",
    "kind": "context",
    "code": "fn main() { workgroupBarrier(); }",
    "expect": "pass",
    "note": "The function call occurs in uniform control flow as it is outside any conditional branch."
  },
  {
    "name": "float-op-overflow-error",
    "desc": "A const-expression resulting in float overflow should cause a shader creation error.",
    "kind": "context",
    "code": "const large_val : f32 = 1e30 * 1e30;",
    "expect": "fail",
    "note": "Overflows in const-expressions should trigger shader creation errors."
  },
  {
    "name": "lanewise-derivative-uniformity",
    "desc": "Ensure dpdx function is only called in uniform control flow.",
    "kind": "context",
    "code": "fn main(@builtin(position) pos : vec3<f32>) { if (pos.x > 0.5) { dpdx(pos.x); } }",
    "expect": "fail",
    "note": "dpdx requires execution under uniform control flow."
  },
  {
    "name": "function-graph-desugaring",
    "desc": "Ensure proper desugaring of pointers within function analysis.",
    "kind": "context",
    "code": "fn foo(p : ptr<function, array<f32,4>>, index : i32) { var x = index; let p2 = &((*p)[0]); *p2 = 5; }",
    "expect": "pass",
    "note": "Check if function desugaring exposes actual memory references properly."
  },
  {
    "name": "floating-point-abs",
    "desc": "Test the behavior of the abs function with negative float.",
    "kind": "eval",
    "code": "abs(-3.14f)",
    "eval": "3.14f",
    "expect": "pass"
  },
  {
    "name": "builtin-position-as-non-uniform",
    "desc": "Using builtin(position) variable within a conditional branch affects uniform control flow.",
    "kind": "context",
    "code": "fn frag_main(@builtin(position) pos : vec4<f32>) { if (pos.x > 0.5) { workgroupBarrier(); } }",
    "expect": "fail",
    "note": "Position is a non-uniform builtin causing non-uniform control flow."
  },
  {
    "name": "cos-function-accuracy",
    "desc": "Evaluate correctness and precision of cos function within specified range.",
    "kind": "eval",
    "code": "cos(3.14159 / 2)",
    "eval": "0.0",
    "expect": "pass",
    "note": "Evaluating cos at pi/2 should yield approximately zero within acceptable floating-point precision."
  },
  {
    "name": "function-call-uniformity-error",
    "desc": "Tests that a call to a barrier function with non-uniformity will trigger a diagnostic",
    "kind": "context",
    "code": "@compute @workgroup_size(16) fn main() { var<private> x: i32 = non_uniform_func(); if (x > 0) { workgroupBarrier(); } }",
    "expect": "fail",
    "note": "The call to workgroupBarrier must be within uniform control flow, but x is derived from a non-uniform value."
  },
  {
    "name": "function-call-uniformity-pass",
    "desc": "Tests that a call to a barrier function within uniformity passes",
    "kind": "context",
    "code": "@compute @workgroup_size(16) fn main() { var<uniform> x: i32 = 1; if (x > 0) { workgroupBarrier(); } }",
    "expect": "pass",
    "note": "x is a uniform value, ensuring all invocations reach the barrier in uniform control flow."
  },
  {
    "name": "short-circuit-evaluation",
    "desc": "Tests short-circuit evaluation for logical operators",
    "kind": "eval",
    "context": "",
    "code": "fn foo() -> bool { return false && (bar() == 1); } fn bar() -> i32 { return 2; }",
    "eval": "false",
    "expect": "pass",
    "note": "bar() should not be evaluated due to short-circuiting."
  },
  {
    "name": "non-uniform-barrier-call",
    "desc": "Check for correct uniformity analysis preventing non-uniform workgroupBarrier",
    "kind": "context",
    "code": "@compute @workgroup_size(8) fn main() { let idx = @builtin(local_invocation_index); if (idx < 4) { workgroupBarrier(); } }",
    "expect": "fail",
    "note": "workgroupBarrier should only be called under uniform control flow."
  },
  {
    "name": "floating-point-overflow-shader-error",
    "desc": "Tests that const-expression evaluation with overflow causes shader creation error",
    "kind": "context",
    "code": "const x: f32 = f32(1e38) * f32(1e10);",
    "expect": "fail",
    "note": "This operation results in overflow outside the range of f32."
  },
  {
    "name": "builtin-values-uniformity-check",
    "desc": "Validation that workgroup_id is uniform and local_invocation_id is not",
    "kind": "eval",
    "code": "let x: bool = workgroup_id.x == 1; let y: bool = local_invocation_id == 0; return x && y;",
    "context": "",
    "eval": "false",
    "expect": "pass",
    "note": "workgroup_id should be uniform, local_invocation_id should not be."
  },
  {
    "name": "fragment-input-uniformity-validation",
    "desc": "A fragment shader should show helper invocations do not affect uniformity",
    "kind": "context",
    "code": "@fragment fn main(@builtin(position) pos: vec4<f32>) -> void { if (pos.x < 0.5) { discard; } textureSample(my_texture, my_sampler, pos.xy); }",
    "expect": "pass",
    "note": "The use of discard should correctly handle helper invocation uniformity."
  },
  {
    "name": "reassociation-validity-test",
    "desc": "Checks if reassociation of mathematical operations obeys floating-point semantics without precise requirement",
    "kind": "eval",
    "code": "let result = (a + b) + c == a + (b + c);",
    "context": "let a: f32 = 0.1; let b: f32 = 0.2; let c: f32 = 0.3;",
    "eval": "false",
    "expect": "pass",
    "note": "Due to floating-point inaccuracies, reassociation might not hold true."
  },
  {
    "name": "texture-load-expression-uniformity-check",
    "desc": "Ensure that textureLoad which doesn't interfere with uniform control flow passes",
    "kind": "context",
    "code": "var my_tex: texture_2d<u32>; @compute @workgroup_size(8) fn main() { let color = textureLoad(my_tex, vec2<i32>(0, 0), 0); }",
    "expect": "pass",
    "note": "textureLoad should not interfere with uniformity requirements."
  }
]