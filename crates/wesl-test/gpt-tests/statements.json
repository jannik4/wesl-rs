[
  {
    "name": "valid-assign-in-loop",
    "desc": "tests simple assignment within a loop",
    "kind": "syntax",
    "syntax": "statement",
    "code": "var a: i32 = 2; loop { a = a + 1; }",
    "expect": "pass"
  },
  {
    "name": "phony-assignment",
    "desc": "tests a phony assignment discarding value",
    "kind": "syntax",
    "syntax": "statement",
    "code": "_ = 10;",
    "expect": "pass"
  },
  {
    "name": "invalid-global-let-decl",
    "desc": "let-declarations are not allowed at module scope",
    "kind": "syntax",
    "syntax": "module",
    "code": "let invalid: i32 = 42;",
    "expect": "fail"
  },
  {
    "name": "increment-statement",
    "desc": "tests increment operation on a variable",
    "kind": "syntax",
    "syntax": "statement",
    "code": "var counter: i32 = 0; counter++;",
    "expect": "pass"
  },
  {
    "name": "decrement-statement",
    "desc": "tests decrement operation on a variable",
    "kind": "syntax",
    "syntax": "statement",
    "code": "var counter: i32 = 0; counter--;",
    "expect": "pass"
  },
  {
    "name": "if-statement-syntax",
    "desc": "tests if-else statement syntax with boolean condition",
    "kind": "syntax",
    "syntax": "statement",
    "code": "if (true) { let x = 10; } else { let x = 20; }",
    "expect": "pass"
  },
  {
    "name": "switch-statement-duplicate-case",
    "desc": "tests switch statement with duplicate case values",
    "kind": "context",
    "code": "switch (x) { case 1: { a = 1; } case 1: { a = 2; } }",
    "expect": "fail",
    "note": "Duplicate case values are not allowed."
  },
  {
    "name": "loop-with-break",
    "desc": "tests a loop with a break statement",
    "kind": "syntax",
    "syntax": "statement",
    "code": "var i: i32 = 0; loop { if (i >= 5) { break; } i++; }",
    "expect": "pass"
  },
  {
    "name": "valid-for-loop",
    "desc": "tests a for-loop syntax",
    "kind": "syntax",
    "syntax": "statement",
    "code": "for (var i = 0; i < 10; i++) { }",
    "expect": "pass"
  },
  {
    "name": "continue-without-loop",
    "desc": "tests continue statement outside of loop",
    "kind": "context",
    "code": "fn example() { if (true) { continue; } }",
    "expect": "fail",
    "note": "Continue is only valid within a loop."
  },
  {
    "name": "wrong-type-if-condition",
    "desc": "tests if statement with non-bool condition",
    "kind": "context",
    "code": "if (1) { let x = 0; }",
    "expect": "fail",
    "note": "If condition must be of bool type."
  },
  {
    "name": "const-assert-false",
    "desc": "tests a const-assert statement with a false value",
    "kind": "context",
    "code": "const_assert false;",
    "expect": "fail",
    "note": "Const assertion fails when the expression evaluates to false."
  },
  {
    "name": "compound-statement-empty",
    "desc": "tests an empty compound statement",
    "kind": "syntax",
    "syntax": "statement",
    "code": "{}",
    "expect": "pass"
  },
  {
    "name": "simple-assignment-valid",
    "desc": "assign a value to an integer variable",
    "kind": "syntax",
    "syntax": "statement",
    "code": "var a: i32 = 1; a = 2;",
    "expect": "pass"
  },
  {
    "name": "phony-assignment-valid",
    "desc": "phony assignment discarding a value",
    "kind": "syntax",
    "syntax": "statement",
    "code": "_ = 42;",
    "expect": "pass"
  },
  {
    "name": "compound-assignment-multiply",
    "desc": "tests compound assignment operator '*='",
    "kind": "syntax",
    "syntax": "statement",
    "code": "var a: i32 = 1; a *= 3;",
    "expect": "pass"
  },
  {
    "name": "increment-statement",
    "desc": "applies increment operator on a variable",
    "kind": "syntax",
    "syntax": "statement",
    "code": "var a: i32 = 5; a++;",
    "expect": "pass"
  },
  {
    "name": "decrement-statement",
    "desc": "applies decrement operator on a variable",
    "kind": "syntax",
    "syntax": "statement",
    "code": "var a: i32 = 5; a--;",
    "expect": "pass"
  },
  {
    "name": "if-statement-without-else",
    "desc": "test behavior with if statement",
    "kind": "syntax",
    "syntax": "statement",
    "code": "var a: i32 = 10; if (a > 5) { a = 3; }",
    "expect": "pass"
  },
  {
    "name": "switch-statement-valid",
    "desc": "basic switch statement with default",
    "kind": "syntax",
    "syntax": "statement",
    "code": "var b: i32 = 0; switch b { case 0: {}; default: {} }",
    "expect": "pass"
  },
  {
    "name": "switch-missing-default",
    "desc": "switch statement without a default clause",
    "kind": "context",
    "code": "var b: i32 = 0; switch b { case 0: {} }",
    "expect": "fail",
    "note": "Each switch statement must have exactly one default clause."
  },
  {
    "name": "loop-with-break",
    "desc": "valid loop with a break statement",
    "kind": "syntax",
    "syntax": "statement",
    "code": "loop { break; }",
    "expect": "pass"
  },
  {
    "name": "infinity-loop-break",
    "desc": "loop without break resulting in infinity loop",
    "kind": "context",
    "code": "loop { discard; }",
    "expect": "fail",
    "note": "Behavior: Discard will not terminate a loop."
  },
  {
    "name": "function-call-with-return",
    "desc": "calling a function that returns a value",
    "kind": "syntax",
    "syntax": "statement",
    "code": "fn f() -> i32 { return 1; } f();",
    "expect": "pass"
  },
  {
    "name": "const-assert",
    "desc": "valid const assertion statement",
    "kind": "syntax",
    "syntax": "statement",
    "code": "const_assert true;",
    "expect": "pass"
  },
  {
    "name": "return-with-expression",
    "desc": "return statement with an expression that matches the function return type",
    "kind": "syntax",
    "syntax": "statement",
    "code": "fn f() -> i32 { return 1; }",
    "expect": "pass"
  },
  {
    "name": "discard-in-non-fragment-shader",
    "desc": "using discard in a non-fragment shader",
    "kind": "context",
    "code": "fn f() { discard; }",
    "expect": "fail",
    "note": "Discard must only be used in a fragment shader stage"
  },
  {
    "name": "simple-assignment-variable",
    "desc": "Simple assignment to a variable",
    "kind": "syntax",
    "syntax": "statement",
    "code": "var a: i32 = 0; a = 5;",
    "expect": "pass"
  },
  {
    "name": "phony-assignment",
    "desc": "Phony assignment evaluates but discards the result",
    "kind": "syntax",
    "syntax": "statement",
    "code": "_ = 5;",
    "expect": "pass"
  },
  {
    "name": "compound-assignment",
    "desc": "Compound assignment with addition",
    "kind": "syntax",
    "syntax": "statement",
    "code": "var a: i32 = 0; a += 2;",
    "expect": "pass"
  },
  {
    "name": "decrement-statement",
    "desc": "Decrement operation on a variable",
    "kind": "syntax",
    "syntax": "statement",
    "code": "var a: i32 = 2; a--;",
    "expect": "pass"
  },
  {
    "name": "increment-statement",
    "desc": "Increment operation on a variable",
    "kind": "syntax",
    "syntax": "statement",
    "code": "var a: i32 = 2; a++;",
    "expect": "pass"
  },
  {
    "name": "if-statement-with-else",
    "desc": "If statement with an else clause",
    "kind": "syntax",
    "syntax": "statement",
    "code": "var a: i32 = 0; if (true) { a = 1; } else { a = 2; }",
    "expect": "pass"
  },
  {
    "name": "switch-statement",
    "desc": "Switch statement with multiple cases",
    "kind": "syntax",
    "syntax": "statement",
    "code": "var a: i32 = 0; switch (a) { case 1: { a = 1; } default: { a = 2; } case 2: { a = 3; } }",
    "expect": "pass"
  },
  {
    "name": "loop-statement-with-break",
    "desc": "Loop with a break statement",
    "kind": "syntax",
    "syntax": "statement",
    "code": "var i: i32 = 0; loop { if (i == 2) { break; } i++; }",
    "expect": "pass"
  },
  {
    "name": "while-statement",
    "desc": "While loop with a condition",
    "kind": "syntax",
    "syntax": "statement",
    "code": "var i: i32 = 0; while (i < 5) { i++; }",
    "expect": "pass"
  },
  {
    "name": "for-statement",
    "desc": "For loop with initialization, condition, and update",
    "kind": "syntax",
    "syntax": "statement",
    "code": "for (var i: i32 = 0; i < 5; i++) { }",
    "expect": "pass"
  },
  {
    "name": "continue-in-for-loop",
    "desc": "Continue statement used inside a for loop",
    "kind": "syntax",
    "syntax": "statement",
    "code": "for (var i: i32 = 0; i < 5; i++) { if (i % 2 == 0) { continue; } }",
    "expect": "pass"
  },
  {
    "name": "break-in-switch-statement",
    "desc": "Break statement used inside a switch statement",
    "kind": "syntax",
    "syntax": "statement",
    "code": "var a: i32 = 0; switch (a) { case 1: { break; } default: { a = 2; } }",
    "expect": "pass"
  },
  {
    "name": "discard-in-fragment-shader",
    "desc": "Discard statement in a fragment shader",
    "kind": "context",
    "code": "@fragment fn main() { discard; }",
    "expect": "pass",
    "note": "Discard is only valid in fragment shaders."
  },
  {
    "name": "return-type-mismatch",
    "desc": "Return type mismatch in function",
    "kind": "context",
    "code": "fn bad_return() -> i32 { return 3.14; }",
    "expect": "fail",
    "note": "The return expression type must match the function's return type."
  },
  {
    "name": "continue-outside-loop",
    "desc": "Invalid use of continue statement outside loop",
    "kind": "context",
    "code": "fn bad_continue() { continue; }",
    "expect": "fail"
  },
  {
    "name": "const-assert-statement-valid",
    "desc": "Valid const assertion at module scope",
    "kind": "syntax",
    "syntax": "statement",
    "code": "const x = 2; const_assert x > 1;",
    "expect": "pass"
  },
  {
    "name": "const-assert-not-const-expression",
    "desc": "Const assertion with non-const expression",
    "kind": "context",
    "code": "fn invalid_assert() { let x = 2; const_assert x > 1; }",
    "expect": "fail",
    "note": "Const assertions must use constant expressions."
  }
]