[
  {
    "name": "constructor-zero-value-float",
    "desc": "Construct a zero-valued f32",
    "kind": "eval",
    "code": "f32()",
    "eval": "0.0f",
    "expect": "pass"
  },
  {
    "name": "constructor-zero-value-vector2",
    "desc": "Construct a zero-valued vec2<f32>",
    "kind": "eval",
    "code": "vec2<f32>()",
    "eval": "vec2<f32>(0.0, 0.0)",
    "expect": "pass"
  },
  {
    "name": "constructor-zero-value-structure",
    "desc": "Construct a zero-valued structure",
    "kind": "eval",
    "code": "Student()",
    "eval": "Student(0, 0.0, array<bool,4>(false, false, false, false))",
    "expect": "pass",
    "context": "struct Student { grade: i32, GPA: f32, attendance: array<bool, 4> }"
  },
  {
    "name": "constructor-infer-type-int",
    "desc": "Construct a vec3 from single integer with type inference",
    "kind": "eval",
    "code": "vec3(1)",
    "eval": "vec3<i32>(1, 1, 1)",
    "expect": "pass"
  },
  {
    "name": "constructor-invalud-float-expression",
    "desc": "Floating point type mismatch during matrix construction",
    "kind": "context",
    "code": "mat2x2<f16>(1.0f, 1.0f, 1.0f, 1.0f)",
    "expect": "fail"
  },
  {
    "name": "constructor-incorrect-column-vector",
    "desc": "Construct mat2x3 using incorrect dimension vectors",
    "kind": "context",
    "code": "mat2x3(vec4<f32>(0.0, 0.0, 0.0, 0.0), vec3<f32>(0.0, 0.0, 0.0))",
    "expect": "fail"
  },
  {
    "name": "constructor-array-from-elements",
    "desc": "Construct an array with specified elements",
    "kind": "eval",
    "code": "array<f32, 3>(1.0, 2.0, 3.0)",
    "eval": "array<f32, 3>(1.0, 2.0, 3.0)",
    "expect": "pass"
  },
  {
    "name": "constructor-vec4-mix-components",
    "desc": "Construct vec4 using vec2 and additional scalar values",
    "kind": "eval",
    "code": "vec4(1.0, vec2(2.0, 3.0), 4.0)",
    "eval": "vec4(1.0, 2.0, 3.0, 4.0)",
    "expect": "pass"
  },
  {
    "name": "bool-constructor-scalar-coercion",
    "desc": "Coerce non-zero scalar to true and zero to false",
    "kind": "eval",
    "code": "vec4(bool(0), bool(1), bool(0.0f), bool(0.1f))",
    "eval": "vec4(false, true, false, true)",
    "expect": "pass"
  },
  {
    "name": "u32-convert-abstract-int",
    "desc": "Convert abstract integer using u32 constructor",
    "kind": "eval",
    "code": "u32(4000000000)",
    "eval": "4000000000u",
    "expect": "pass"
  },
  {
    "name": "zero-value-bool",
    "desc": "zero value constructor for bool returns false",
    "kind": "eval",
    "code": "bool()",
    "eval": "false",
    "expect": "pass"
  },
  {
    "name": "zero-value-i32",
    "desc": "zero value constructor for i32 returns 0",
    "kind": "eval",
    "code": "i32()",
    "eval": "0i",
    "expect": "pass"
  },
  {
    "name": "zero-value-u32",
    "desc": "zero value constructor for u32 returns 0",
    "kind": "eval",
    "code": "u32()",
    "eval": "0u",
    "expect": "pass"
  },
  {
    "name": "zero-value-f32",
    "desc": "zero value constructor for f32 returns 0.0",
    "kind": "eval",
    "code": "f32()",
    "eval": "0.0f",
    "expect": "pass"
  },
  {
    "name": "zero-value-f16",
    "desc": "zero value constructor for f16 returns 0.0",
    "kind": "eval",
    "code": "f16()",
    "eval": "0.0h",
    "expect": "pass"
  },
  {
    "name": "zero-value-vec2-f32",
    "desc": "zero value constructor for vec2<f32> returns vec2(0.0, 0.0)",
    "kind": "eval",
    "code": "vec2<f32>()",
    "eval": "vec2<f32>(0.0, 0.0)",
    "expect": "pass"
  },
  {
    "name": "zero-value-vec3-i32",
    "desc": "zero value constructor for vec3<i32> returns vec3(0, 0, 0)",
    "kind": "eval",
    "code": "vec3<i32>()",
    "eval": "vec3<i32>(0, 0, 0)",
    "expect": "pass"
  },
  {
    "name": "zero-value-array-bool-2",
    "desc": "zero value constructor for array<bool, 2> returns array(false, false)",
    "kind": "eval",
    "code": "array<bool, 2>()",
    "eval": "array<bool, 2>(false, false)",
    "expect": "pass"
  },
  {
    "name": "zero-value-mat2x2-f32",
    "desc": "zero value constructor for mat2x2<f32> returns matrix filled with 0.0",
    "kind": "eval",
    "code": "mat2x2<f32>()",
    "eval": "mat2x2<f32>(vec2<f32>(0.0, 0.0), vec2<f32>(0.0, 0.0))",
    "expect": "pass"
  },
  {
    "name": "zero-value-struct",
    "desc": "zero value constructor for a user-defined struct returns all members as zero values",
    "kind": "eval",
    "code": "Student()",
    "eval": "Student(i32(), f32(), array<bool,4>())",
    "expect": "pass",
    "context": "struct Student { grade: i32, GPA: f32, attendance: array<bool,4> };"
  },
  {
    "name": "zero-value-bool",
    "desc": "Construct zero value for bool type",
    "kind": "eval",
    "code": "bool()",
    "eval": "false",
    "expect": "pass"
  },
  {
    "name": "zero-value-i32",
    "desc": "Construct zero value for i32 type",
    "kind": "eval",
    "code": "i32()",
    "eval": "0i",
    "expect": "pass"
  },
  {
    "name": "zero-value-u32",
    "desc": "Construct zero value for u32 type",
    "kind": "eval",
    "code": "u32()",
    "eval": "0u",
    "expect": "pass"
  },
  {
    "name": "zero-value-f32",
    "desc": "Construct zero value for f32 type",
    "kind": "eval",
    "code": "f32()",
    "eval": "0.0f",
    "expect": "pass"
  },
  {
    "name": "zero-value-vec2-i32",
    "desc": "Construct zero value for vec2<i32> type",
    "kind": "eval",
    "code": "vec2<i32>()",
    "eval": "vec2<i32>(0, 0)",
    "expect": "pass"
  },
  {
    "name": "zero-value-vec3-f32",
    "desc": "Construct zero value for vec3<f32> type",
    "kind": "eval",
    "code": "vec3<f32>()",
    "eval": "vec3<f32>(0.0, 0.0, 0.0)",
    "expect": "pass"
  },
  {
    "name": "zero-value-vec4-u32",
    "desc": "Construct zero value for vec4<u32> type",
    "kind": "eval",
    "code": "vec4<u32>()",
    "eval": "vec4<u32>(0u, 0u, 0u, 0u)",
    "expect": "pass"
  },
  {
    "name": "mtx2x2-f32-from-elements",
    "desc": "Construct a 2x2 matrix from f32 elements",
    "kind": "eval",
    "code": "mat2x2<f32>(1.0, 2.0, 3.0, 4.0)",
    "eval": "mat2x2<f32>(vec2<f32>(1.0, 2.0), vec2<f32>(3.0, 4.0))",
    "expect": "pass"
  },
  {
    "name": "mandatory-conv-i32-f32",
    "desc": "Converting i32 to f32 should be valid for explicit conversion",
    "kind": "eval",
    "code": "f32(i32(5))",
    "eval": "5.0f",
    "expect": "pass"
  },
  {
    "name": "invalid-conv-u32-bool",
    "desc": "Converting a non-scalar type to bool should fail",
    "kind": "context",
    "code": "bool(vec2<u32>(1u, 0u))",
    "expect": "fail",
    "note": "Vectors cannot be directly converted to bool"
  }
]